#!/usr/bin/env bash

#
# bash_common is used ONLY on interactive sessions
#

# Load bash_common once
[ "$__DF_BASH_COMMON" ] && return 0
export __DF_BASH_COMMON=true

# Load bashrc
[ ! "$__DF_BASHRC" ] && [ -f ~/.bashrc ] && . ~/.bashrc

# Detect Darwin OS
DARWIN="" && [[ "$OSTYPE" == *'darwin'* ]] && DARWIN=true
DOCKER="" && grep -q '/docker/' /proc/1/cgroup 2>/dev/null && DOCKER=true

if [ "$DARWIN" ]; then
  # Load bash completion
  if [ "$BREW_PREFIX" ] && [ -e "$BREW_PREFIX/etc/bash_completion" ]; then
   . "$BREW_PREFIX/etc/bash_completion"
  fi

  # Add GNU's man pages to MANPATH
  if [ "$BREW_PREFIX" ] && [ -d "$BREW_PREFIX/opt/coreutils/libexec/gnuman" ]; then
    export MANPATH="$BREW_PREFIX/opt/coreutils/libexec/gnuman:$MANPATH"
  fi
fi

################################
# Env mods
################################

# Enable terminal colors
export CLICOLOR=1
export LSCOLORS=ExFxCxDxBxegedabagacad

# stop checking for mail
unset MAILCHECK

# Set architecture flags
export ARCHFLAGS="-arch x86_64"

# Try setup locale (wrong locate sends warning to stderr, but no error)
TRY=$(export LC_CTYPE=en_US.UTF-8 2>&1) && export LC_CTYPE=en_US.UTF-8 >/dev/null 2>&1
[ "$TRY" ] && TRY=$(export LC_CTYPE=C.UTF-8 2>&1) && export LC_CTYPE=C.UTF-8 >/dev/null 2>&1
[ "$TRY" ] && TRY=$(export LC_CTYPE=C 2>&1) && export LC_CTYPE=C >/dev/null 2>&1

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
export HISTCONTROL=ignoredups
export HISTSIZE=20000
export HISTFILESIZE=20000
export HISTTIMEFORMAT="%Y-%m-%d %T "

# Default editor
export EDITOR="vim"
export GIT_EDITOR="vim"

# -- raw ps1
# export PS1="[\u@\h \W\]# "
# -- colored ps1
# export PS1="\e[32m[\u@\h \e[33m\W\\e[32m]# \e[0m"
# -- tell bash that the sequence of characters should not be counted in the prompt's length
# -- using \[ and \]
if [ "$DARWIN" ]; then
  export PS1='\[\e[32m\][\u@\h \[\e[33m\]\W\[\e[32m\]]# \[\e[0m\]'
else
  export PS1='\[\e[0;33m\][\u@\h \[\e[1;33m\]\W\[\e[0;33m\]]# \[\e[0m\]'
fi

# Load git-prompt
if [ ! "$DOCKER" ] && [ -f ~/.dotfiles/packages/git-completion/git-prompt.sh ] && hash git >/dev/null 2>&1; then
  export GIT_PS1_SHOWDIRTYSTATE=1
  export GIT_PS1_SHOWCOLORHINTS=1
  export GIT_PS1_SHOWUNTRACKEDFILES=1
  export GIT_PS1_SHOWSTASHSTATE=1
  . ~/.dotfiles/packages/git-completion/git-prompt.sh
  if [ "$DARWIN" ]; then
    export PROMPT_COMMAND='__git_ps1 "\[\e[32m\][\u@\h\[\e[0m\]" " \[\e[33m\]\W\[\e[32m\]]# \[\e[0m\]"'
  else
    export PROMPT_COMMAND='__git_ps1 "\[\e[0;33m\][\u@\h\[\e[0m\]" " \[\e[1;33m\]\W\[\e[0;33m\]]# \[\e[0m\]"'
  fi
fi

################################
# Terminal Hacks
################################

# Increase terminal baudrate to max
[ "$SSH_TTY" ] && stty -F $SSH_TTY 115200 >/dev/null 2>&1 || stty 115200 >/dev/null 2>&1

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob >/dev/null 2>&1

# Bash includes filenames beginning with a . in the results of filename expansion
shopt -s dotglob >/dev/null 2>&1

# Bash will not attempt to search the PATH for possible completions
# when completion is attempted on an empty line
shopt -s no_empty_cmd_completion >/dev/null 2>&1

# Autocorrect typos in path names when using `cd`
shopt -s cdspell  >/dev/null 2>&1
shopt -s dirspell >/dev/null 2>&1

# If necessary, updates the values of LINES and COLUMNS if window size changed
shopt -s checkwinsize >/dev/null 2>&1

# If this is set, Bash checks that a command found in the hash table exists
# before trying to execute it. If a hashed command no longer exists,
# a normal path search is performed
shopt -s checkhash >/dev/null 2>&1

# Enable 'autocd'   - '**/qux' will enter './foo/bar/baz/qux'
# Enable 'globstar' - Recursive globbing, e.g. 'echo **/*.txt'
shopt -s globstar >/dev/null 2>&1
shopt -s autocd >/dev/null 2>&1

# append to the history file, don't overwrite it
shopt -s histappend >/dev/null 2>&1


##############################################
#                                            #
# DO NOT MODIFY THIS FILE                    #
# This file will be overwritten on an update #
#                                            #
# Use .bash_profile for your custom settings #
#                                            #
##############################################

# .dotfiles auto update
if [ ! "$DOCKER" ] && [ $((RANDOM % 10)) -eq 0 ] && [ -x ~/.dotfiles/auto_update ]; then
  ( nohup ~/.dotfiles/auto_update >/dev/null 2>&1 & ) >/dev/null 2>&1
fi

# Load user's .bash_profile
[ ! "$__DF_PROFILE" ] && [ -f ~/.bash_profile ] && . ~/.bash_profile
