#!/usr/bin/env bash
cd "$(dirname "$0")" || { echo "Can't chdir into $(dirname "$0")"; exit 1; }
[ ! -d "$(echo ~)" ] || { echo "Missing HOME dir: " ~; exit 1; }

# Create backup dir
rm -Rf ~/.dotfiles_backup
mkdir -p ~/.dotfiles_backup

# Install ~/.ssh/config on Darwin
if [ "$(uname)" == "Darwin" ]; then
  echo -n "$(echo ~)/.ssh/config - copying..."
  [ -f ~/.ssh/config ] && mv -f ~/.ssh/config ~/.dotfiles_backup && echo " [saved backup]" || echo
  mkdir -p ~/.ssh/control
  cp -f ~/.dotfiles/ssh_config_darwin ~/.ssh/config
fi

safe_copy() {
  echo -n "$(echo ~)/.$1 - copying..."
  [ -f ~/.$1 ] && mv -f ~/.$1 ~/.dotfiles_backup && echo " [saved backup]" || echo
  cp -f ~/.dotfiles/$1 ~/.$1
}

# Install dotfiles on ~
DOTFILES_SAFE=( bashrc bash_common bash_aliases gitconfig gitignore_global
                vimrc inputrc tmux.conf vimrc dir_colors)
for dotfile in "${DOTFILES_SAFE[@]}"; do
  safe_copy "$dotfile"
done

# Disable welcome on .screenrc
if [ -f ~/.screenrc ]; then
  grep -q startup_message ~/.screenrc || echo "startup_message off" >>~/.screenrc
else
  echo "startup_message off" >>~/.screenrc
fi

# Copy GIT_ variable values to .gitconfig
if [[ "$(uname)" =~ Darwin ]]; then
  [ -f ~/.bash_profile ] && . ~/.bash_profile
  [ "$GIT_AUTHOR_NAME" ]  && git config --global user.name  "$GIT_AUTHOR_NAME"
  [ "$GIT_AUTHOR_EMAIL" ] && git config --global user.email "$GIT_AUTHOR_EMAIL"
fi

# Check if .bash_profile has no values
[ -f ~/.bash_apikeys ] && rm -f /.bash_apikeys
if [ -f ~/.bash_profile ]; then
  unset HOMEBREW_GITHUB_API_TOKEN GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL
  unset GIT_COMMITTER_NAME GIT_COMMITTER_EMAIL
  . ~/.bash_profile
  if [ ! "$HOMEBREW_GITHUB_API_TOKEN" ] && [ ! "$GIT_AUTHOR_NAME" ] && \
     [ ! "$GIT_AUTHOR_EMAIL" ] && [ ! "$GIT_COMMITTER_NAME" ] && \
     [ ! "$GIT_COMMITTER_EMAIL" ]; then
     safe_copy "bash_profile"
  fi
else
  safe_copy "bash_profile"
fi

# Disable GIT_ env from profile on Linux/BSD
if [[ ! "$(uname)" =~ Darwin ]]; then
  sed -i 'bak' -e 's/^export GIT/#export GIT/g' ~/.bash_profile
  rm -f ~/.bash_profile.bak
fi

# Remove push.default=simple for old git versions
if hash git >/dev/null 2>&1; then
  # git status . will return error on bad config (Eg. push.default=simple not supported)
  if ! git status . >/dev/null 2>&1; then
    git config --global --unset push.default
    git config --global --remove-section push
  fi
fi

# All done
unset __DF_BASHRC __DF_BASH_COMMON __DF_PROFILE
. ~/.bashrc
