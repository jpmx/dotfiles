#!/usr/bin/env bash
cd "$(dirname "$0")" || { echo "Can't chdir into $(dirname "$0")"; exit 1; }
[ ! -d "$(echo ~)" ] && { echo "Missing HOME dir: " ~; exit 1; }

# Create backup dir
rm -Rf ~/.dotfiles_backup ~/.bash_aliases
mkdir -p ~/.dotfiles_backup

# Install ~/.ssh/config on Darwin
if [ "$(uname)" == "Darwin" ]; then
  echo -n "$(echo ~)/.ssh/dotfiles_ssh_config - copying..."
  mkdir -p ~/.ssh/control
  cp -f ~/.dotfiles/ssh_config_darwin ~/.ssh/dotfiles_ssh_config
fi

# Install ~/.ssh/config on Linux Desktop/Server
if [ "$XDG_CURRENT_DESKTOP" ] || [ "$GDMSESSION" ]; then
  echo -n "$(echo ~)/.ssh/ssh_config_linux_client - copying..."
  mkdir -p ~/.ssh/control
  cp -f ~/".dotfiles/ssh_config_linux_client" ~/.ssh/dotfiles_ssh_config
elif [[ "$(uname)" == "Linux" ]]; then
  echo -n "$(echo ~)/.ssh/ssh_config_linux_server - copying..."
  mkdir -p ~/.ssh
  cp -f ~/".dotfiles/ssh_config_linux_server" ~/.ssh/dotfiles_ssh_config
fi

# Remove previous dotfiles versions
grep '^# ~/.ssh/config for Darwin with stronger algorithms first' ~/.ssh/config >/dev/null 2>&1 && : > ~/.ssh/config
grep '^# ~/.ssh/config for Linux ' ~/.ssh/config >/dev/null 2>&1 && : > ~/.ssh/config

# add custom dotfiles_ssh_config
if ! head -n1 ~/.ssh/config | grep -q '^Include dotfiles_ssh_config' >/dev/null 2>&1; then
  CURRENT=$(cat ~/.ssh/config 2>/dev/null)
  echo 'Include dotfiles_ssh_config' > ~/.ssh/config
  [ "$CURRENT" ] && echo "$CURRENT" >> ~/.ssh/config
fi

safe_copy() {
  echo -n "$(echo ~)/.$1 - copying..."
  [ -f ~/.$1 ] && mv -f ~/.$1 ~/.dotfiles_backup && echo " [saved backup]" || echo
  cp -f ~/.dotfiles/$1 ~/.$1
}

# Install dotfiles on ~
DOTFILES_SAFE=( zshenv zshrc bashrc bash_common gitconfig gitignore_global
                vimrc inputrc tmux.conf vimrc dir_colors screenrc)
for dotfile in "${DOTFILES_SAFE[@]}"; do
  safe_copy "$dotfile"
done

# Check if .bash_profile has no values
[ -f ~/.bash_apikeys ] && rm -f /.bash_apikeys
if [ -f ~/.bash_profile ]; then
  unset HOMEBREW_GITHUB_API_TOKEN GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL
  unset GIT_COMMITTER_NAME GIT_COMMITTER_EMAIL
  eval "$(grep -E 'export [A-Z0-9_]+=' ~/.bash_profile | grep -Ev '^#|&|\|')"
  if [ ! "$HOMEBREW_GITHUB_API_TOKEN" ] && [ ! "$GIT_AUTHOR_NAME" ] && \
     [ ! "$GIT_AUTHOR_EMAIL" ] && [ ! "$GIT_COMMITTER_NAME" ] && \
     [ ! "$GIT_COMMITTER_EMAIL" ]; then
     safe_copy "bash_profile"
  fi
else
  safe_copy "bash_profile"
fi
echo

# Copy GIT_ variable values to .gitconfig on Desktops clients
if [[ "$(uname)" =~ Darwin ]]; then
  # Detect NAME on git config
  if [ ! "$GIT_AUTHOR_NAME" ] || [ ! "$GIT_COMMITTER_NAME" ]; then
    echo -n "Enter your NAME  for git commits: " && read -r GIT_AUTHOR_NAME
    sed -i '' -e '/GIT_AUTHOR_NAME/d' -e '/GIT_COMMITTER_NAME/d' ~/.bash_profile ~/.zprofile
    echo "export GIT_AUTHOR_NAME='$GIT_AUTHOR_NAME'"    | tee -a ~/.bash_profile ~/.zprofile >/dev/null
    echo "export GIT_COMMITTER_NAME='$GIT_AUTHOR_NAME'" | tee -a ~/.bash_profile ~/.zprofile >/dev/null
  fi
  # Detect EMAIL on git config
  if [ ! "$GIT_AUTHOR_EMAIL" ] || [ ! "$GIT_COMMITTER_EMAIL" ]; then
    echo -n "Enter your EMAIL for git commits: " && read -r GIT_AUTHOR_EMAIL
    sed -i '' -e '/GIT_AUTHOR_EMAIL/d' -e '/GIT_COMMITTER_EMAIL/d' ~/.bash_profile ~/.zprofile
    echo "export GIT_AUTHOR_EMAIL='$GIT_AUTHOR_EMAIL'"    | tee -a ~/.bash_profile ~/.zprofile >/dev/null
    echo "export GIT_COMMITTER_EMAIL='$GIT_AUTHOR_EMAIL'" | tee -a ~/.bash_profile ~/.zprofile >/dev/null
  fi
  # Save NAME/EMAIL on git
  [ -f ~/.bash_profile ] && eval "$(grep 'export GIT_' ~/.bash_profile)"
  echo "Configuring git client on ~/.gitconfig:"
  [ "$GIT_AUTHOR_NAME" ]  && git config --global user.name  "$GIT_AUTHOR_NAME"
  [ "$GIT_AUTHOR_EMAIL" ] && git config --global user.email "$GIT_AUTHOR_EMAIL"
else
  # Remove custom git names on servers
  sed -i -e '/GIT_AUTHOR_EMAIL/d' -e '/GIT_COMMITTER_EMAIL/d' ~/.bash_profile ~/.zprofile >/dev/null 2>&1
  sed -i -e '/GIT_AUTHOR_NAME/d'  -e '/GIT_COMMITTER_NAME/d'  ~/.bash_profile ~/.zprofile >/dev/null 2>&1
  git config --global --remove-section user >/dev/null 2>&1
fi

# Copy GIT config from bash to zsh
if [ ! -f ~/.zprofile ] || ! grep -q '^GIT_' ~/.zprofile; then
  grep '^GIT_' ~/.bash_profile >> ~/.zprofile
fi

exit 0
